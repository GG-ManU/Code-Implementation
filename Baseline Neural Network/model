    from __future__ import print_function
    import keras
    from keras.datasets import mnist
    from keras.models import Model
    from keras.layers import Input, Dense, Flatten, Conv2D, MaxPooling2D
    from keras import backend as K
    from keras.callbacks import EarlyStopping

    import numpy as np
    from sklearn.metrics import accuracy_score
    import matplotlib.pyplot as plt

    plt.style.use("ggplot")

    batch_size = 128
    num_classes = 10
    epochs = 12

    # input image dimensions
    img_rows, img_cols = 28, 28

    # the data, split between train and test sets
    (x_train, y_train), (x_test, y_test) = mnist.load_data()

    if K.image_data_format() == 'channels_first':
        x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)
        x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)
        input_shape = (1, img_rows, img_cols)
    else:
        x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
        x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
        input_shape = (img_rows, img_cols, 1)

    x_train = x_train.astype('float32') / 255
    x_test = x_test.astype('float32') / 255
    print('x_train shape:', x_train.shape)
    print(x_train.shape[0], 'train samples')
    print(x_test.shape[0], 'test samples')

    # convert class vectors to binary class matrices
    y_train = keras.utils.to_categorical(y_train, num_classes)
    y_test = keras.utils.to_categorical(y_test, num_classes)

    def get_baseline_model(act="relu"):
        inp = Input(input_shape)
        x = Conv2D(32, kernel_size=(3, 3), activation=act)(inp)
        x = Conv2D(64, kernel_size=(3, 3), activation=act)(x)
        x = MaxPooling2D(pool_size=(2, 2))(x)
        x = Flatten()(x)
        x = Dense(128, activation=act)(x)
        out = Dense(num_classes, activation='softmax')(x)

        model = Model(inputs=inp, outputs=out)

        model.compile(loss=keras.losses.categorical_crossentropy,
                      optimizer=keras.optimizers.Adam(),
                      metrics=['accuracy'])
        return model

    # Create the baseline model
    baseline_model = get_baseline_model(act="relu")

    # Define EarlyStopping callback
    early_stopping = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)

    # Train the baseline model
    history = baseline_model.fit(x_train, y_train,
                                 batch_size=batch_size,
                                 epochs=epochs,
                                 verbose=1,
                                 validation_data=(x_test, y_test),
                                 callbacks=[early_stopping])

    # Evaluate the baseline model
    score = baseline_model.evaluate(x_test, y_test, verbose=0)

    print('Test loss:', score[0])
    print('Test accuracy:', score[1])

    # Make predictions with the baseline model
    y_pred = baseline_model.predict(x_test)
    baseline_acc = accuracy_score(y_test.argmax(axis=1), y_pred.argmax(axis=1))
    print("Baseline model accuracy: {:.1%}".format(baseline_acc))
